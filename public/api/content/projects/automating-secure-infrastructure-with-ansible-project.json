{
  "id": "automating-secure-infrastructure-with-ansible-project",
  "type": "projects",
  "metadata": {
    "title": "Automating Secure Infrastructure with Ansible: Managing SSH, Sudoers, and User Access Control",
    "date": "2021-12-12",
    "summary": "Automating Secure Infrastructure with Ansible streamlines SSH key management, user provisioning, and sudoers configuration to enhance security and efficiency. This project ensures password-less authentication, centralized sudo monitoring, and safe system administration through Infrastructure as Code (IaC). ðŸš€",
    "image": "https://raw.githubusercontent.com/digin1/web-images/main/ansible.png",
    "tag": "ansible, ubuntu",
    "featured": "yes"
  },
  "content": "<h2><strong>Introduction</strong></h2>\n<p>Infrastructure automation is a critical aspect of modern system administration. My project focused on using <strong>Ansible</strong> to automate essential administrative tasks such as:</p>\n<ul>\n<li><strong>Managing SSH Key Authentication</strong></li>\n<li><strong>Creating and Removing Users Securely</strong></li>\n<li><strong>Configuring Sudoers for Role-Based Access Control</strong></li>\n<li><strong>Monitoring and Logging Sudo Actions</strong></li>\n<li><strong>Deploying Security Enhancements (Safe Deletion, Password Policies, etc.)</strong></li>\n</ul>\n<p>The primary goal was to create an automated, repeatable, and scalable solution for managing user access and securing the infrastructure.</p>\n<hr>\n<h2><strong>1. SSH Key Management and Secure Access Automation</strong></h2>\n<p>One of the core challenges in multi-node environments is <strong>secure authentication</strong>. Instead of relying on password-based access, I automated <strong>SSH key generation, distribution, and configuration</strong>.</p>\n<h3><strong>Generating and Distributing SSH Keys</strong></h3>\n<p>Ansible was used to generate SSH keys for different hosts and copy them to the appropriate machines.</p>\n<p><strong>Playbook for Generating SSH Keys (Conditional Execution to Avoid Overwriting):</strong></p>\n<pre><code class=\"language-yaml\">- name: Generate SSH keys for root if they donâ€™t exist\n  hosts: all\n  become: false\n  tasks:\n    - name: Check if root SSH key exists\n      stat:\n        path: &quot;~/.ssh/id_rsa&quot;\n      register: ssh_key_check\n\n    - name: Generate SSH key for root\n      shell: ssh-keygen -t rsa -N &#39;&#39; -f ~/.ssh/id_rsa\n      when: not ssh_key_check.stat.exists\n</code></pre>\n<h3><strong>Copying SSH Keys to Ansible Host</strong></h3>\n<p>To allow secure, password-less communication between machines, public keys were copied to the <strong>Ansible control machine</strong>:</p>\n<pre><code class=\"language-yaml\">- name: Copy SSH keys to Ansible control machine\n  hosts: awsnodes\n  become: true\n  tasks:\n    - name: Fetch public SSH key from nodes\n      fetch:\n        src: &quot;~/.ssh/id_rsa.pub&quot;\n        dest: &quot;/root/awskeys/{{ inventory_hostname }}_id_rsa.pub&quot;\n        flat: yes\n</code></pre>\n<h3><strong>Copying SSH Keys to Target Nodes</strong></h3>\n<pre><code class=\"language-yaml\">- name: Copy SSH keys to authorized_keys on target nodes\n  hosts: logserver\n  become: true\n  vars:\n    key_dir: /root/awskeys\n  tasks:\n    - name: Ensure .ssh directory exists\n      file:\n        path: &quot;/root/.ssh&quot;\n        state: directory\n        mode: &quot;0700&quot;\n\n    - name: Add public SSH keys\n      authorized_key:\n        user: &quot;root&quot;\n        key: &quot;{{ lookup(&#39;file&#39;, item) }}&quot;\n        state: present\n      with_fileglob: &quot;{{ key_dir }}/*_id_rsa.pub&quot;\n</code></pre>\n<h3><strong>Outcome</strong></h3>\n<p>âœ… <strong>Password-less authentication</strong> across all servers<br>âœ… <strong>Hardened security</strong> by eliminating password-based access<br>âœ… <strong>Automated onboarding</strong> for new machines with SSH authentication</p>\n<hr>\n<h2><strong>2. Automated User and Sudoers Management</strong></h2>\n<p>Managing users manually across multiple servers can lead to inconsistencies and security risks. Ansible was used to automate <strong>user creation, privilege assignment, and sudoers configuration</strong>.</p>\n<h3><strong>Creating Users</strong></h3>\n<pre><code class=\"language-yaml\">- name: Create users on all nodes\n  hosts: all\n  become: true\n  vars:\n    users:\n      - alice\n      - bob\n      - charlie\n  tasks:\n    - name: Add users\n      user:\n        name: &quot;{{ item }}&quot;\n        create_home: yes\n        state: present\n      loop: &quot;{{ users }}&quot;\n</code></pre>\n<h3><strong>Granting Sudo Privileges</strong></h3>\n<p>To enforce <strong>role-based access control</strong>, users were assigned to the sudoers file <strong>with strict validation</strong>:</p>\n<pre><code class=\"language-yaml\">- name: Configure sudoers for specific users\n  hosts: all\n  become: true\n  tasks:\n    - name: Add users to sudoers\n      lineinfile:\n        path: /etc/sudoers\n        state: present\n        line: &quot;{{ item }} ALL=(ALL) NOPASSWD: ALL&quot;\n        validate: &quot;/usr/sbin/visudo -cf %s&quot;\n      loop: &quot;{{ users }}&quot;\n</code></pre>\n<p><strong>Outcome</strong>:\nâœ… <strong>Role-based access management</strong><br>âœ… <strong>Automated onboarding &amp; offboarding</strong> of users<br>âœ… <strong>Strict sudoers validation</strong> to prevent misconfigurations</p>\n<hr>\n<h2><strong>3. Monitoring Sudo Commands and Logging Activity</strong></h2>\n<p>To improve security, all <code>sudo</code> activity needed to be logged and monitored remotely.</p>\n<h3><strong>Playbook for Enabling Sudo Logging</strong></h3>\n<pre><code class=\"language-yaml\">- name: Configure sudo logging\n  hosts: all\n  become: true\n  tasks:\n    - name: Add sudo replay logging\n      lineinfile:\n        path: /etc/sudoers\n        state: present\n        insertafter: &quot;^# Defaults.*visiblepw&quot;\n        line: |\n          Defaults log_output\n          Defaults!/usr/bin/sudoreplay !log_output\n          Defaults!/sbin/reboot !log_output\n</code></pre>\n<h3><strong>Automated Log Collection and Sync</strong></h3>\n<p>A script was deployed to <strong>automatically sync logs</strong> from all nodes to a remote monitoring server.</p>\n<pre><code class=\"language-bash\">#!/bin/bash\nSRC=&quot;/var/log/sudo-io/&quot;\nDEST_DIR=&quot;/root/sudologs/{{ inventory_hostname }}/&quot;\nDEST_HOST=&quot;root@18.218.206.77&quot;\nSSH_PORT=4956\n\nssh -p &quot;$SSH_PORT&quot; -o StrictHostKeyChecking=no &quot;$DEST_HOST&quot; &quot;mkdir -p $DEST_DIR&quot;\nrsync -avz -e &quot;ssh -p $SSH_PORT -o StrictHostKeyChecking=no&quot; &quot;$SRC&quot; &quot;$DEST_HOST:$DEST_DIR&quot;\n</code></pre>\n<p>A <strong>cron job</strong> was configured to run this script <strong>every 12 hours</strong>.</p>\n<pre><code class=\"language-yaml\">- name: Schedule sudo log monitoring script\n  cron:\n    name: &quot;Monitor Sudo Logs&quot;\n    minute: &quot;0&quot;\n    hour: &quot;*/12&quot;\n    job: &quot;/root/monitor_sudo_logs.sh &gt;&gt; /var/log/monitor_sudo_logs.log 2&gt;&amp;1&quot;\n    state: present\n</code></pre>\n<h3><strong>Outcome</strong></h3>\n<p>âœ… <strong>Centralized sudo activity monitoring</strong><br>âœ… <strong>Regular log synchronization</strong> for auditing<br>âœ… <strong>Prevention of privilege escalation attempts</strong></p>\n<hr>\n<h2><strong>4. Enhancing Security with Safe Deletion Policies</strong></h2>\n<p>Accidental file deletions can cause <strong>irreversible damage</strong>. To prevent this, I implemented a <strong>safe deletion wrapper script</strong>.</p>\n<h3><strong>Safe <code>rm</code> Script</strong></h3>\n<pre><code class=\"language-bash\">#!/bin/bash\necho &quot;Warning: You are using the &#39;rm&#39; command which deletes files permanently!&quot;\necho &quot;Files to be deleted: $@&quot;\nread -p &quot;Are you sure you want to continue? (y/n) &quot; -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]\nthen\n    /bin/rm &quot;$@&quot;\nelse\n    echo &quot;Operation cancelled.&quot;\nfi\n</code></pre>\n<h3><strong>Deploying Safe <code>rm</code> Script Using Ansible</strong></h3>\n<pre><code class=\"language-yaml\">- name: Deploy safe_rm script\n  hosts: all\n  become: true\n  tasks:\n    - name: Copy safe_rm script\n      copy:\n        src: safe_rm.sh\n        dest: /usr/local/bin/safe_rm\n        mode: &quot;0755&quot;\n\n    - name: Alias rm to safe_rm\n      blockinfile:\n        path: /etc/profile\n        block: |\n          alias rm=&#39;safe_rm&#39;\n        create: yes\n</code></pre>\n<h3><strong>Outcome</strong></h3>\n<p>âœ… <strong>Prevention of accidental file deletions</strong><br>âœ… <strong>Enhanced safety while using <code>rm</code> command</strong><br>âœ… <strong>Forced user confirmation before permanent deletions</strong></p>\n<hr>\n<h2><strong>Final Takeaways</strong></h2>\n<p>By implementing Ansible automation, I was able to <strong>streamline</strong> system administration across multiple nodes, ensuring:</p>\n<p>âœ” <strong>Secure and password-less authentication</strong> using SSH keys<br>âœ” <strong>Automated user management</strong> with structured onboarding &amp; offboarding<br>âœ” <strong>Centralized sudo monitoring</strong> with periodic log collection<br>âœ” <strong>Strict sudoers file management</strong> with validation to prevent errors<br>âœ” <strong>A safer file deletion process</strong> with <code>safe_rm</code></p>\n<p>This project reinforced my skills in <strong>infrastructure automation, security hardening, and scalable system management</strong>. ðŸš€</p>\n",
  "rawContent": "\r\n## **Introduction**\r\n\r\nInfrastructure automation is a critical aspect of modern system administration. My project focused on using **Ansible** to automate essential administrative tasks such as:\r\n\r\n- **Managing SSH Key Authentication**\r\n- **Creating and Removing Users Securely**\r\n- **Configuring Sudoers for Role-Based Access Control**\r\n- **Monitoring and Logging Sudo Actions**\r\n- **Deploying Security Enhancements (Safe Deletion, Password Policies, etc.)**\r\n\r\nThe primary goal was to create an automated, repeatable, and scalable solution for managing user access and securing the infrastructure.\r\n\r\n---\r\n\r\n## **1. SSH Key Management and Secure Access Automation**\r\n\r\nOne of the core challenges in multi-node environments is **secure authentication**. Instead of relying on password-based access, I automated **SSH key generation, distribution, and configuration**.\r\n\r\n### **Generating and Distributing SSH Keys**\r\n\r\nAnsible was used to generate SSH keys for different hosts and copy them to the appropriate machines.\r\n\r\n**Playbook for Generating SSH Keys (Conditional Execution to Avoid Overwriting):**\r\n\r\n```yaml\r\n- name: Generate SSH keys for root if they donâ€™t exist\r\n  hosts: all\r\n  become: false\r\n  tasks:\r\n    - name: Check if root SSH key exists\r\n      stat:\r\n        path: \"~/.ssh/id_rsa\"\r\n      register: ssh_key_check\r\n\r\n    - name: Generate SSH key for root\r\n      shell: ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa\r\n      when: not ssh_key_check.stat.exists\r\n```\r\n\r\n### **Copying SSH Keys to Ansible Host**\r\n\r\nTo allow secure, password-less communication between machines, public keys were copied to the **Ansible control machine**:\r\n\r\n```yaml\r\n- name: Copy SSH keys to Ansible control machine\r\n  hosts: awsnodes\r\n  become: true\r\n  tasks:\r\n    - name: Fetch public SSH key from nodes\r\n      fetch:\r\n        src: \"~/.ssh/id_rsa.pub\"\r\n        dest: \"/root/awskeys/{{ inventory_hostname }}_id_rsa.pub\"\r\n        flat: yes\r\n```\r\n\r\n### **Copying SSH Keys to Target Nodes**\r\n\r\n```yaml\r\n- name: Copy SSH keys to authorized_keys on target nodes\r\n  hosts: logserver\r\n  become: true\r\n  vars:\r\n    key_dir: /root/awskeys\r\n  tasks:\r\n    - name: Ensure .ssh directory exists\r\n      file:\r\n        path: \"/root/.ssh\"\r\n        state: directory\r\n        mode: \"0700\"\r\n\r\n    - name: Add public SSH keys\r\n      authorized_key:\r\n        user: \"root\"\r\n        key: \"{{ lookup('file', item) }}\"\r\n        state: present\r\n      with_fileglob: \"{{ key_dir }}/*_id_rsa.pub\"\r\n```\r\n\r\n### **Outcome**\r\n\r\nâœ… **Password-less authentication** across all servers  \r\nâœ… **Hardened security** by eliminating password-based access  \r\nâœ… **Automated onboarding** for new machines with SSH authentication\r\n\r\n---\r\n\r\n## **2. Automated User and Sudoers Management**\r\n\r\nManaging users manually across multiple servers can lead to inconsistencies and security risks. Ansible was used to automate **user creation, privilege assignment, and sudoers configuration**.\r\n\r\n### **Creating Users**\r\n\r\n```yaml\r\n- name: Create users on all nodes\r\n  hosts: all\r\n  become: true\r\n  vars:\r\n    users:\r\n      - alice\r\n      - bob\r\n      - charlie\r\n  tasks:\r\n    - name: Add users\r\n      user:\r\n        name: \"{{ item }}\"\r\n        create_home: yes\r\n        state: present\r\n      loop: \"{{ users }}\"\r\n```\r\n\r\n### **Granting Sudo Privileges**\r\n\r\nTo enforce **role-based access control**, users were assigned to the sudoers file **with strict validation**:\r\n\r\n```yaml\r\n- name: Configure sudoers for specific users\r\n  hosts: all\r\n  become: true\r\n  tasks:\r\n    - name: Add users to sudoers\r\n      lineinfile:\r\n        path: /etc/sudoers\r\n        state: present\r\n        line: \"{{ item }} ALL=(ALL) NOPASSWD: ALL\"\r\n        validate: \"/usr/sbin/visudo -cf %s\"\r\n      loop: \"{{ users }}\"\r\n```\r\n\r\n**Outcome**:\r\nâœ… **Role-based access management**  \r\nâœ… **Automated onboarding & offboarding** of users  \r\nâœ… **Strict sudoers validation** to prevent misconfigurations\r\n\r\n---\r\n\r\n## **3. Monitoring Sudo Commands and Logging Activity**\r\n\r\nTo improve security, all `sudo` activity needed to be logged and monitored remotely.\r\n\r\n### **Playbook for Enabling Sudo Logging**\r\n\r\n```yaml\r\n- name: Configure sudo logging\r\n  hosts: all\r\n  become: true\r\n  tasks:\r\n    - name: Add sudo replay logging\r\n      lineinfile:\r\n        path: /etc/sudoers\r\n        state: present\r\n        insertafter: \"^# Defaults.*visiblepw\"\r\n        line: |\r\n          Defaults log_output\r\n          Defaults!/usr/bin/sudoreplay !log_output\r\n          Defaults!/sbin/reboot !log_output\r\n```\r\n\r\n### **Automated Log Collection and Sync**\r\n\r\nA script was deployed to **automatically sync logs** from all nodes to a remote monitoring server.\r\n\r\n```bash\r\n#!/bin/bash\r\nSRC=\"/var/log/sudo-io/\"\r\nDEST_DIR=\"/root/sudologs/{{ inventory_hostname }}/\"\r\nDEST_HOST=\"root@18.218.206.77\"\r\nSSH_PORT=4956\r\n\r\nssh -p \"$SSH_PORT\" -o StrictHostKeyChecking=no \"$DEST_HOST\" \"mkdir -p $DEST_DIR\"\r\nrsync -avz -e \"ssh -p $SSH_PORT -o StrictHostKeyChecking=no\" \"$SRC\" \"$DEST_HOST:$DEST_DIR\"\r\n```\r\n\r\nA **cron job** was configured to run this script **every 12 hours**.\r\n\r\n```yaml\r\n- name: Schedule sudo log monitoring script\r\n  cron:\r\n    name: \"Monitor Sudo Logs\"\r\n    minute: \"0\"\r\n    hour: \"*/12\"\r\n    job: \"/root/monitor_sudo_logs.sh >> /var/log/monitor_sudo_logs.log 2>&1\"\r\n    state: present\r\n```\r\n\r\n### **Outcome**\r\n\r\nâœ… **Centralized sudo activity monitoring**  \r\nâœ… **Regular log synchronization** for auditing  \r\nâœ… **Prevention of privilege escalation attempts**\r\n\r\n---\r\n\r\n## **4. Enhancing Security with Safe Deletion Policies**\r\n\r\nAccidental file deletions can cause **irreversible damage**. To prevent this, I implemented a **safe deletion wrapper script**.\r\n\r\n### **Safe `rm` Script**\r\n\r\n```bash\r\n#!/bin/bash\r\necho \"Warning: You are using the 'rm' command which deletes files permanently!\"\r\necho \"Files to be deleted: $@\"\r\nread -p \"Are you sure you want to continue? (y/n) \" -n 1 -r\r\necho\r\nif [[ $REPLY =~ ^[Yy]$ ]]\r\nthen\r\n    /bin/rm \"$@\"\r\nelse\r\n    echo \"Operation cancelled.\"\r\nfi\r\n```\r\n\r\n### **Deploying Safe `rm` Script Using Ansible**\r\n\r\n```yaml\r\n- name: Deploy safe_rm script\r\n  hosts: all\r\n  become: true\r\n  tasks:\r\n    - name: Copy safe_rm script\r\n      copy:\r\n        src: safe_rm.sh\r\n        dest: /usr/local/bin/safe_rm\r\n        mode: \"0755\"\r\n\r\n    - name: Alias rm to safe_rm\r\n      blockinfile:\r\n        path: /etc/profile\r\n        block: |\r\n          alias rm='safe_rm'\r\n        create: yes\r\n```\r\n\r\n### **Outcome**\r\n\r\nâœ… **Prevention of accidental file deletions**  \r\nâœ… **Enhanced safety while using `rm` command**  \r\nâœ… **Forced user confirmation before permanent deletions**\r\n\r\n---\r\n\r\n## **Final Takeaways**\r\n\r\nBy implementing Ansible automation, I was able to **streamline** system administration across multiple nodes, ensuring:\r\n\r\nâœ” **Secure and password-less authentication** using SSH keys  \r\nâœ” **Automated user management** with structured onboarding & offboarding  \r\nâœ” **Centralized sudo monitoring** with periodic log collection  \r\nâœ” **Strict sudoers file management** with validation to prevent errors  \r\nâœ” **A safer file deletion process** with `safe_rm`\r\n\r\nThis project reinforced my skills in **infrastructure automation, security hardening, and scalable system management**. ðŸš€\r\n"
}